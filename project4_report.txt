1. Basic information
Team number (e.g., 01) : 27
#1 Student ID : 73601428
#1 Student Name : Cheng-Liang, Yu
#2 Student ID : N/A
#2 Student Name : N/A
OS (bit) : 64-bit CentOS Linux (openlab)
gcc version : gcc 5.4.0


2. Catalog information about Index
- Show your catalog information about an index (tables, columns). 
my Tables table has four attributes, which are  table-id:int, table-name:varchar(50), file-name:varchar(50), flag:int
my Columns table has five attributes, which are table-id:int, column-name:varchar(50), column-type:int, column-length:int, column-position:int

3. Block Nested Loop Join (If you have implemented this feature)
- Describe how your block nested loop join works (especially, how you manage the given buffers.)
I read a Block from left iterator first and use a in-memory hash table to store them and then compare them 
with the tuples returned by right iterator, which is a table scan. The ones that match the condition requirement should be returned
by BNLJ.

4. Index Nested Loop Join (If you have implemented this feature)
- Describe how your grace hash join works.
I use left iterator to fetch tuples and compare it with the tuples returned by index scan, which is the right itertor.
The first one that matches the condition should be returned by INLJ

5. Grace Hash Join (If you have implemented this feature)
- Describe how your grace hash join works (especially, in-memory structure).


6. Aggregation
- Describe how your aggregation (basic, group-based hash) works.
I iterate through the iterator and use a value to store the value the aggregation request wants.

7. Implementation Detail
- Have you added your own source file (.cc or .h)?
no
- Have you implemented any optional features? Then, describe them here.
no
- Other implementation details:
If input has two iterator (for instance, BNLJ,INLJ), then whenever the right iterator ends I would reset its iterator.
In this way the new tuple from left iterator can iterator the right iterator again.

6. Other (optional)
- Freely use this section to tell us about things that are related to the project 4, but not related to the other sections (optional)
I learned a lot from project 4. Although doing this project alone took me a lot of time but my C++ skills did progress. 
Thank you Prof. Li and Assistant Luo.
